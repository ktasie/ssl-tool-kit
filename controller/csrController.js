import os from 'os';
import { matchedData, validationResult } from 'express-validator';
import SSLtools from '../model/sslTools.js';
import AppError from '../utils/appError.js';

export default async function generateCSR(req, res, next) {
  try {
    let errorString = '';
    const errors = validationResult(req);
    
    if (!errors.isEmpty()) {
      for (const el of errors.array()) {
        errorString = `${errorString}${el.msg}${os.EOL}`;
      }
      return next(new AppError(`${errorString}`, 400));
    }

    const {
      commonName,
      countryName,
      stateOrProvinceName,
      localityName,
      organizationName,
      organizationalUnitName,
      emailAddress,
      password
    } = matchedData(req);
    

    // initialize ssl tools object
    const tools = new SSLtools();

    // Generate privatekey
    const key = await tools.generateUnencryptedPrivatekey(password);

    // generate csr with default options and autogenerated key
    const csr = await tools.generateCSR(
      commonName,
      countryName,
      stateOrProvinceName,
      localityName,
      organizationName,
      organizationalUnitName,
      emailAddress,
      key.key,
      password
    );

    const cert = await tools.generateSelfSigned(csr.csr, key.key, password);

    res.status(200).json({
      status: 'success',
      data: { csr: `${csr.csr}`, key: `${key.key}`, cert }
    });
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err
    });
  }
}
